/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN14ImageProcessorE_t {};
} // unnamed namespace

template <> constexpr inline auto ImageProcessor::qt_create_metaobjectdata<qt_meta_tag_ZN14ImageProcessorE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "ImageProcessor",
        "initHOGDetector",
        "HOGDescriptor",
        "",
        "detectPeople",
        "Mat",
        "string",
        "imagePath",
        "verbose",
        "detect",
        "openImage",
        "saveImage",
        "closeImage",
        "undo",
        "adjustParameters",
        "zoomIn",
        "zoomOut",
        "zoomToActualSize",
        "zoomToFit",
        "rotateImage",
        "flipImage",
        "cropImage",
        "binarize",
        "inverse",
        "grayscale",
        "medianFilter",
        "size",
        "edgeDetection",
        "method",
        "morphologicalOperation",
        "operation",
        "histogramEqualization",
        "zoomSliderChanged",
        "value"
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'initHOGDetector'
        QtMocHelpers::SlotData<HOGDescriptor()>(1, 3, QMC::AccessPrivate, 0x80000000 | 2),
        // Slot 'detectPeople'
        QtMocHelpers::SlotData<Mat(const string &, bool)>(4, 3, QMC::AccessPrivate, 0x80000000 | 5, {{
            { 0x80000000 | 6, 7 }, { QMetaType::Bool, 8 },
        }}),
        // Slot 'detectPeople'
        QtMocHelpers::SlotData<Mat(const string &)>(4, 3, QMC::AccessPrivate | QMC::MethodCloned, 0x80000000 | 5, {{
            { 0x80000000 | 6, 7 },
        }}),
        // Slot 'detect'
        QtMocHelpers::SlotData<void()>(9, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'openImage'
        QtMocHelpers::SlotData<void()>(10, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'saveImage'
        QtMocHelpers::SlotData<void()>(11, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'closeImage'
        QtMocHelpers::SlotData<void()>(12, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'undo'
        QtMocHelpers::SlotData<void()>(13, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'adjustParameters'
        QtMocHelpers::SlotData<void()>(14, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'zoomIn'
        QtMocHelpers::SlotData<void()>(15, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'zoomOut'
        QtMocHelpers::SlotData<void()>(16, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'zoomToActualSize'
        QtMocHelpers::SlotData<void()>(17, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'zoomToFit'
        QtMocHelpers::SlotData<void()>(18, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'rotateImage'
        QtMocHelpers::SlotData<void()>(19, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'flipImage'
        QtMocHelpers::SlotData<void()>(20, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'cropImage'
        QtMocHelpers::SlotData<void()>(21, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'binarize'
        QtMocHelpers::SlotData<void(bool)>(22, 3, QMC::AccessPrivate, QMetaType::Void, {{
            { QMetaType::Bool, 23 },
        }}),
        // Slot 'grayscale'
        QtMocHelpers::SlotData<void()>(24, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'medianFilter'
        QtMocHelpers::SlotData<void(int)>(25, 3, QMC::AccessPrivate, QMetaType::Void, {{
            { QMetaType::Int, 26 },
        }}),
        // Slot 'edgeDetection'
        QtMocHelpers::SlotData<void(const QString &)>(27, 3, QMC::AccessPrivate, QMetaType::Void, {{
            { QMetaType::QString, 28 },
        }}),
        // Slot 'morphologicalOperation'
        QtMocHelpers::SlotData<void(const QString &)>(29, 3, QMC::AccessPrivate, QMetaType::Void, {{
            { QMetaType::QString, 30 },
        }}),
        // Slot 'histogramEqualization'
        QtMocHelpers::SlotData<void()>(31, 3, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'zoomSliderChanged'
        QtMocHelpers::SlotData<void(int)>(32, 3, QMC::AccessPrivate, QMetaType::Void, {{
            { QMetaType::Int, 33 },
        }}),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<ImageProcessor, qt_meta_tag_ZN14ImageProcessorE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject ImageProcessor::staticMetaObject = { {
    QMetaObject::SuperData::link<QMainWindow::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14ImageProcessorE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14ImageProcessorE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN14ImageProcessorE_t>.metaTypes,
    nullptr
} };

void ImageProcessor::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<ImageProcessor *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: { HOGDescriptor _r = _t->initHOGDetector();
            if (_a[0]) *reinterpret_cast< HOGDescriptor*>(_a[0]) = std::move(_r); }  break;
        case 1: { Mat _r = _t->detectPeople((*reinterpret_cast< std::add_pointer_t<string>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<bool>>(_a[2])));
            if (_a[0]) *reinterpret_cast< Mat*>(_a[0]) = std::move(_r); }  break;
        case 2: { Mat _r = _t->detectPeople((*reinterpret_cast< std::add_pointer_t<string>>(_a[1])));
            if (_a[0]) *reinterpret_cast< Mat*>(_a[0]) = std::move(_r); }  break;
        case 3: _t->detect(); break;
        case 4: _t->openImage(); break;
        case 5: _t->saveImage(); break;
        case 6: _t->closeImage(); break;
        case 7: _t->undo(); break;
        case 8: _t->adjustParameters(); break;
        case 9: _t->zoomIn(); break;
        case 10: _t->zoomOut(); break;
        case 11: _t->zoomToActualSize(); break;
        case 12: _t->zoomToFit(); break;
        case 13: _t->rotateImage(); break;
        case 14: _t->flipImage(); break;
        case 15: _t->cropImage(); break;
        case 16: _t->binarize((*reinterpret_cast< std::add_pointer_t<bool>>(_a[1]))); break;
        case 17: _t->grayscale(); break;
        case 18: _t->medianFilter((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 19: _t->edgeDetection((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 20: _t->morphologicalOperation((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 21: _t->histogramEqualization(); break;
        case 22: _t->zoomSliderChanged((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject *ImageProcessor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *ImageProcessor::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14ImageProcessorE_t>.strings))
        return static_cast<void*>(this);
    return QMainWindow::qt_metacast(_clname);
}

int ImageProcessor::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QMainWindow::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 23)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 23;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 23)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 23;
    }
    return _id;
}
QT_WARNING_POP
